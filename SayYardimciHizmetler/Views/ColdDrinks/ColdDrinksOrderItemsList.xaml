<UserControl x:Class="SayYardimciHizmetler.Views.ColdDrinks.ColdDrinksOrderItemsList"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:vm="clr-namespace:Core.Common.Views;assembly=Core"
             xmlns:fac="clr-namespace:SayYardimciHizmetler.Factories.ViewModels"
             xmlns:vmodels="clr-namespace:SayYardimciHizmetler.ViewModels.ColdDrinks"
             xmlns:local="clr-namespace:SayYardimciHizmetler.Views.ColdDrinks"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800"
             vm:ViewModelLoader.FactoryType="{x:Type fac:ColdDrinksViewModelFactory}" >
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Button.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.PopupBox.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.TextBlock.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Card.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.CheckBox.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Flipper.xaml" />
                <!-- throw in some extra colour for our floating action button -->
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/MaterialDesignColor.Green.Named.Primary.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>


    <Grid HorizontalAlignment="Center" Width="500" >
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <materialDesign:TransitioningContent OpeningEffect="{materialDesign:TransitionEffect SlideInFromRight, Duration=0:0:1.2}">
            <materialDesign:ColorZone Mode="PrimaryMid" materialDesign:ShadowAssist.ShadowDepth="Depth3" Margin="4">
                <StackPanel Margin="16" Orientation="Horizontal">
                    <materialDesign:PackIcon Kind="ZoomOut" Height="32" Width="32" />
                    <TextBlock Style="{DynamicResource MaterialDesignHeadlineTextBlock}" Margin="16 0 0 0">Soğuk İçecek Sipariş Detayları</TextBlock>
                </StackPanel>
            </materialDesign:ColorZone>
        </materialDesign:TransitioningContent>


        <DataGrid Grid.Row="1"
  Margin="0 8 0 0"
  ItemsSource="{Binding Items3}"
  CanUserSortColumns="True"
  CanUserAddRows="False"
  AutoGenerateColumns="False"
  materialDesign:DataGridAssist.CellPadding="13 8 8 8"
  materialDesign:DataGridAssist.ColumnHeaderPadding="8">
            <DataGrid.Columns>
                <DataGridCheckBoxColumn
      Binding="{Binding IsSelected}"
      ElementStyle="{StaticResource MaterialDesignDataGridCheckBoxColumnStyle}"
      EditingElementStyle="{StaticResource MaterialDesignDataGridCheckBoxColumnEditingStyle}">
                    <DataGridCheckBoxColumn.Header>
                        <!--padding to allow hit test to pass thru for sorting -->
                        <Border
          Background="Transparent"
          Padding="6 0 6 0"
          HorizontalAlignment="Center">
                            <CheckBox
            HorizontalAlignment="Center"
            DataContext="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=DataContext}"
            IsChecked="{Binding IsAllItems3Selected}" />
                        </Border>
                    </DataGridCheckBoxColumn.Header>
                </DataGridCheckBoxColumn>
                <DataGridTextColumn
      Binding="{Binding Code}"
      Header="Code"
      EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}" />
                <!-- if you want to use the pop up style (MaterialDesignDataGridTextColumnPopupEditingStyle), you must use MaterialDataGridTextColumn -->
                <materialDesign:MaterialDataGridTextColumn
      Binding="{Binding Name}"
      Header="Name"
      EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnPopupEditingStyle}" />
                <!-- set a max length to get an indicator in the editor -->
                <materialDesign:MaterialDataGridTextColumn
      Binding="{Binding Description}"
      Header="Description"
      MaxLength="255"
      EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnPopupEditingStyle}" />
                <materialDesign:MaterialDataGridTextColumn
      Binding="{Binding Numeric}"
      Header="Number with long header"
      Width="120"
      EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnPopupEditingStyle}">
                    <DataGridTextColumn.HeaderStyle>
                        <Style
          TargetType="{x:Type DataGridColumnHeader}"
          BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}">
                            <Setter
            Property="HorizontalAlignment"
            Value="Right" />
                            <Setter
            Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <TextBlock
                  TextWrapping="Wrap"
                  Text="{Binding}"
                  TextAlignment="Right" />
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </DataGridTextColumn.HeaderStyle>
                    <DataGridTextColumn.ElementStyle>
                        <Style
          TargetType="{x:Type TextBlock}">
                            <Setter
            Property="HorizontalAlignment"
            Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </materialDesign:MaterialDataGridTextColumn>
                <!-- use custom combo box column to get better combos. Use ItemsSourceBinding as your binding template to be applied to each combo -->
                <materialDesign:MaterialDataGridComboBoxColumn
      Header="Food"
      SelectedValueBinding="{Binding Food}"
      ItemsSourceBinding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=DataContext.Foods}" />
            </DataGrid.Columns>
        </DataGrid>







        <StackPanel Orientation="Horizontal" Grid.Row="2" HorizontalAlignment="Right">
            <Button Style="{DynamicResource MaterialDesignFloatingActionMiniButton}" 
                    Command="{x:Static materialDesign:Transitioner.MovePreviousCommand}"
                    VerticalAlignment="Center" HorizontalAlignment="Left" 
                    Margin="16">
                <materialDesign:PackIcon Kind="StepBackward" />
            </Button>
            <Button Style="{DynamicResource MaterialDesignFloatingActionAccentButton}"                     
                    Command="{x:Static materialDesign:Transitioner.MoveNextCommand}"
                    VerticalAlignment="Top"
                    Margin="16">
                <materialDesign:PackIcon Kind="StepForward" />
            </Button>
        </StackPanel>
    </Grid>
</UserControl>
